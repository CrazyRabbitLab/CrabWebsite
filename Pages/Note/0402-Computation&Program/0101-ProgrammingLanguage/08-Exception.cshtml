@page

<h1>异常 Exception</h1>

@* 
<p>当程序运行时, 又是会出现各种意料中的错误, 这种情况又被称为异常.</p>
<p>比如我们期待用户输入一个整数, 用户却输入了一个字符串.</p>
<p>当发生异常以后, 我们就可以捕获对应的异常, 并对其进行处理.</p>
<p>需要注意时, 异常处理是处理那些可以预期的错误情况, 当发生不可预期的错误情况时, 不要强行让代码带伤运行, 直接对外输出日志后停止运行.</p>
<p>异常处理的基本逻辑是: 监控可能出现异常的代码, 当发生异常后向外抛出一个异常; 程序捕获对应的异常后, 进行异常处理.</p>

<ol>
    <li>try语句</li>
    <li>throw语句</li>
    <li>catch语句</li>
    <li>finally语句</li>
</ol>

<h2>try语句</h2>
<p>我们使用try语句运行那些可能发生异常情况的代码.</p>

<h3>C#中的try语句介绍</h3>
<p>C#中的try语句语法如下所示: </p>
<pre><code>
try语句
{
    /*可能发生异常情况的代码*/
}
</code></pre>

<h2>throw语句</h2>

<h2>catch语句</h2>

<h2>finally语句</h2>

<h2>异常处理总结</h2>
<p>我们可以将try语句, throw语句, catch语句以及finally语句综合起来进行异常处理.</p>

<h3>C#中的异常处理总结介绍</h3>
<p>在C#中, 我们可以综合使用各种异常处理语句进行异常处理, 对应语法如下: </p>
<pre><code>
try
{
    /*可能出现异常的代码*/
    /*当代码出现异常后, 使用throw语句抛出对应的异常*/
}
catch(异常类名 异常变量名)
{
    /*对异常进行处理的代码*/
}
finally
{
    /*不论是否发生异常, 都必须执行的代码*/
    /*这一部分通常用来释放使用的资源*/
}
</code></pre> *@