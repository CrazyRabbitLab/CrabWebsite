@page

<h1>基础数据类型 BasicDataType</h1>

<ul>
    <li><a href="#整数类型">整数类型</a></li>
    <li><a href="#浮点数类型">浮点数类型</a></li>
    <li><a href="#布尔类型">布尔类型</a></li>
    <li><a href="#字符类型">字符类型</a></li>
</ul>

<p>基础数据类型指的是计算机编程语言标准库中最为基础的数据类型, 是构成其他数据类型的基础.</p>
<p>有时各种数据类型共享有相似的数据与操作, 下面使用<code>Type</code>指代多种不同的数据类型.</p>
<p>需要注意: 在不同的语境中, <code>Type</code>指代的数据类型的种类是不同的.</p>
<p>再次强调: 在不同的语境中, <code>Type</code>指代的数据类型的种类是不同的.</p>

<h2 id="整数类型">整数类型</h2>

<ul>
    <li>静态数据: </li>
    <ul>
        <li></li>
    </ul>
    <li>静态操作: </li>
    <li>实例数据: </li>
    <li>实例操作: </li>
</ul>

<p>整数类型指的就是计算机中的正整数, 0 以及负整数.</p>
<p>在Dotnet中, 共有以下几种整数类型: <code>System.SByte</code> <code>System.Int16</code> <code>System.Int32</code> <code>System.Int64</code> <code>System.Int128</code> <code>System.Byte</code> <code>System.UInt16</code> <code>System.UInt32</code> <code>System.UInt64</code> <code>System.UInt128</code> </p>
<p>上述几种整数类型的核心区别是能够表达的数值范围不同.</p>


<li>实例数据: </li>

<h2 id="浮点数类型">浮点数类型</h2>

<p>浮点数类型指的就是数学中的带有小数点的小数类型.</p>
<p>在Dotnet中, 共有以下几种浮点数类型: <code>System.Half</code> <code>System.Single</code> <code>System.Double</code> <code>System.Decimal</code></p>
<p>其中, <code>System.Half</code> <code>System.Single</code> <code>System.Double</code>是二进制浮点数; <code>System.Decimal</code>是十进制浮点数.</p>

<h2 id="布尔类型">布尔类型</h2>

<p>布尔类型就是真值与假值.</p>
<p>在Dotnet中, 布尔类型指的是: <code>System.Boolean</code>, 简写为bool.</p>

<ul>
    <li>静态数据</li>
    <ul>
        <li>String Boolean.FalseString</li>
        <ul>
            <li>这个字段与字符串"False"等价;</li>
        </ul>
        <li>String Boolean.TureString</li>
        <ul>
            <li>这个字段与字符串"True"等价;</li>
        </ul>
    </ul>
    <li>静态操作</li>
    <ul>
        <li>Boolean Boolean.Parse(ReadOnlySpan&lt;char&gt; value)</li>
        <li>Boolean Boolean.Parse(string value)</li>
        <li>Boolean Boolean.TryParse(ReadOnlySpan&lt;char&gt; value, out bool result)</li>
        <li>Boolean Boolean.TryParse(string? value, out bool result)</li>
    </ul>
    <li>实例数据</li>
    <li>示例操作</li>
    <ul>
        <li>Int32 Instance.CompareTo(Boolean value)</li>
        <ul>
            <li>介绍: 将这个实例本身与特定的布尔对象进行比较, 然后返回一个表明它们之间关系的整数.</li>
            <li>输入: </li>
            <ul>
                <li>value: 一个将用来与这个实例进行比较的布尔对象.</li>
            </ul>
            <li>输出: </li>
            <ul>
                <li>输出一个代表这个示例与value之间关系的带符号整数, 其中: </li>
                <li>当两者都是<code>True</code>或两者都是<code>False</code>时, 返回值是0</li>
                <li>当实例是<code>False</code>并且value是<code>True</code>时, 返回值小于0</li>
                <li>当实例是<code>True</code>并且value是<code>False</code>时, 返回值大于0</li>
            </ul>

        </ul>
        <li>Int32 Instance.CompareTo(Object? obj)</li>
        <ul>
            <li>介绍: 将这个实例与特定的对象进行比较, 然后返回一个表明它们之间关系的整数.</li>
            <li>输入: </li>
            <ul>
                <li>obj: 一个将用来与这个实例进行比较的对象, 或者是<code>null</code></li>
            </ul>
            <li>输出: </li>
            <ul>
                <li></li>
            </ul>
            <li>注意: </li>
            <ul>
                <li>obj必须是<code>null</code>或者Boolean的一个实例, 其他情况下会抛出异常ArgumentException</li>
            </ul>
        </ul>
        <li>Boolean Instance.Equals(Boolean obj)</li>
        <li>Boolean Instance.Equals(Object? obj)</li>
        <li>Int32 Instance.GetHashCode()</li>
        <li>TypeCode Instance.GetTypeCode()</li>
        <li>String Instance.ToString()</li>
        <li>String Instance.ToString(IFormatProvider? provider)</li>
        <li>Boolean Instance.TryFormat(Span&lt;char&gt; destination, out Int32 charsWritten)</li>
    </ul>
</ul>

<h2 id="字符类型">字符类型</h2>

<p>字符类型就是单一字符, 在Dotnet中指的是UTF-16字符集中的某一个字符.</p>
<p>在Dotnet中字符类型指的是<code>System.Char</code></p>

<ul>
    <li>静态数据</li>
    <ul>
        <li>Char Char.MaxValue</li>
        <li>Char Char.MinValue</li>
    </ul>
    <li>静态操作</li>
    <ul>
        <li>String Char.ConvertFromUtf32(Int32 utf32)</li>
        <li>Int32 Char.ConvertToUtf32(Char highSurrogate, Char lowSurrogate)</li>
        <li>Int32 Char.ConvertToUtf32(String s, Int32 index)</li>
        <li>Double Char.GetNumericValue(Char c)</li>
        <li>Double Char.GetNumericValue(String s, Int32 index)</li>
        <li>UnicodeCategory Char.GetUnicodeCategory(Char c)</li>
        <li>UnicodeCategory Char.GetUnicodeCategory(String s, Int32 index)</li>
        <li>Boolean Char.IsAscii(Char c)</li>
        <li>Boolean Char.IsAsciiDigit(Char c)</li>
        <li>Boolean Char.IsAsciiHexDigit(Char c)</li>
        <li>Boolean Char.IsAsciiHexDigitLower(Char c)</li>
        <li>Boolean Char.IsAsciiHexDigitUpper(Char c)</li>
        <li>Boolean Char.IsAsciiLetter(Char c)</li>
        <li>Boolean Char.IsAsciiLetterLower(Char c)</li>
        <li>Boolean Char.IsAsciiLetterOrDigit(Char c)</li>
        <li>Boolean Char.IsAsciiLetterUpper(Char c)</li>
        <li>Boolean Char.IsBetween(Char c, Char minInclusive, Char maxInclusive)</li>
        <li>Boolean Char.IsControl(Char c)</li>
        <li>Boolean Char.IsControl(String s, Int32 index)</li>
        <li>Boolean Char.IsDigit(Char c)</li>
        <li>Boolean Char.IsDigit(String s, Int32 index)</li>
        <li>Boolean Char.IsHighSurrogate(Char c)</li>
        <li>Boolean Char.IsHighSurrogate(String s, Int32 index)</li>
        <li>Boolean Char.IsLetter(Char c)</li>
        <li>Boolean Char.IsLetter(String s, Int32 index)</li>
        <li>Boolean Char.IsLetterOrDigit(Char c)</li>
        <li>Boolean Char.IsLetterOrDigit(String s, Int32 index)</li>
        <li>Boolean Char.IsLower(Char c)</li>
        <li>Boolean Char.IsLower(String s, Int32 index)</li>
        <li>Boolean Char.IsLowSurrogate(Char c)</li>
        <li>Boolean Char.IsLowSurrogate(String s, Int32 index)</li>
        <li>Boolean Char.IsNumber(Char c)</li>
        <li>Boolean Char.IsNumber(String s, Int32 index)</li>
        <li>Boolean Char.IsPunctuation(Char c)</li>
        <li>Boolean Char.IsPunctuation(String s, Int32 index)</li>
        <li>Boolean Char.IsSeparator(Char c)</li>
        <li>Boolean Char.IsSeparator(String s, Int32 index)	</li>
        <li>Boolean Char.IsSurrogate(Char c)</li>
        <li>Boolean Char.IsSurrogate(String s, Int32 index)</li>
        <li>Boolean Char.IsSurrogatePair(Char highSurrogate, Char lowSurrogate)</li>
        <li>Boolean Char.IsSurrogatePair(String s, Int32 index)</li>
        <li>Boolean Char.IsSymbol(Char c)</li>
        <li>Boolean Char.IsSymbol(String s, Int32 index)</li>
        <li>Boolean Char.IsUpper(Char c)</li>
        <li>Boolean Char.IsUpper(String s, Int32 index)</li>
        <li>Boolean Char.IsWhiteSpace(Char c)</li>
        <li>Boolean Char.IsWhiteSpace(String s, Int32 index)</li>
        <li>Char Char.Parse(String s)</li>
        <li>Char Char.ToLower(Char c, System.Globalization.CultureInfo culture)</li>
        <li>Char Char.ToLower(Char c)</li>
        <li>Char Char.ToLowerInvariant(Char c)	</li>
        <li>String Char.ToString(Char c)</li>
        <li>Char Char.ToUpper(Char c, System.Globalization.CultureInfo culture)</li>
        <li>Char Char.ToUpper(Char c)</li>
        <li>Char Char.ToUpperInvariant(Char c)</li>
        <li>Boolean Char.TryParse(String? s, out Char result)</li>
    </ul>
    <li>实例数据</li>
    <li>实例操作</li>
    <ul>
        <li>Int32 Instance.CompareTo(Char value)</li>
        <li>Int32 Instance.CompareTo(Object? value)</li>
        <li>Boolean Instance.Equals(Char obj)</li>
        <li>Boolean Instance.Equals(Object? obj)</li>
        <li>Int32 Instance.GetHashCode()</li>
        <li>TypeCode Instance.GetTypeCode()</li>
        <li>String Instance.ToString()</li>
        <li>String Instance.ToString(IFormatProvider? provider)</li>
    </ul>
</ul>

