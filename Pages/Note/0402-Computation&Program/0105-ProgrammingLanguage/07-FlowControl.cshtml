@page

<h1>流程控制 FlowControl</h1>

@* 
<ul>
    <li>判断</li>
    <li>循环</li>
    <li>中断</li>
    <li>跳转</li>
</ul>

<ol>
    <li>判断</li>
    <ol>
        <li>if...else...语句</li>
        <li>switch语句</li>
    </ol>
    <li>循环</li>
    <ol>
        <li>while语句</li>
        <li>for语句</li>
    </ol>
    <li>中断</li>
    <li>跳转</li>
</ol>

<h2>判断</h2>

<h3>if...else if...else...语句</h3>

<h4>C#中的if...else if...else...介绍</h4>
<p>在C#中, 我们可以使用if...else...来控制程序运行的流程.</p>
<p>具体语法如下: </p>
<pre><code>
if(布尔变量或表达式01)
{
    /*当布尔变量或表达式01为真时执行*/
}
else if(布尔变量或表达式02)
{
    /*当布尔变量或表达式02为真时执行*/
    /*else if是可选的, 但必须在if之后*/
}
else if(布尔变量或表达式03)
{
    /*当布尔变量或表达式03为真时执行*/
    /*else if是可选的, 但必须在if之后*/
}
else 
{
    /*当上面条件都不为真时执行*/
    /*else是可选的, 但必须在if与else if之后*/
}
</code></pre>

<h3>switch语句</h3>


<h4>C#中的switch语句介绍</h4>
<p>在C#中, 我们还可以使用switch语句控制代码运行的流程.</p>
<p>具体语法如下: </p>
<pre><code>
switch(变量或表达式A)
{
    case 常量或常量表达式01:
    {
        /*当变量或表达式A = 常量或常量表达式01时, 执行代码*/
        break;
    }
        
    case 常量或常量表达式02:
    {
        /*当变量或表达式A = 常量或常量表达式02时, 执行代码*/
        break;
    }
        
    default :
    {
        /*default是可选的, 当变量或变量表达式A不符合任何常量或常量表达式时, 执行代码*/
        break;
    }
        
}
</code></pre>
<p>需要注意的是, 变量或表达式A的数据类型需要与常量或表达式01等的数据类型相同.</p>
<p>记得要写break.</p>

<h4>C#中的switch语句示例</h4>

<h2>循环</h2>

<h3>while语句</h3>

<h4>C#中的while语句介绍</h4>
<p>在C#中, 我们还可以使用while语句使代码循环运行.</p>
<p>具体语法如下: </p>
<pre><code>
while(布尔变量或表达式A)
{
    /*当布尔变量或表达式A为真时运行代码*/
    /*记得调整布尔变量或表达式A的值, 以控制循环语句何时结束*/
}
</code></pre>

<h4>C#中的do...while语句介绍</h4>
<p>在C#中, 我们还可以使用do...while语句使代码循环运行.</p>
<p>do...while循环与while循环大体相似, 只是do...while循环将至少执行一次语句块中的内容.</p>
<p>具体语法如下: </p>
<pre><code>
do
{
    /*当布尔变量或表达式A的值为真时执行代码*/
    /*语句块中的代码将至少执行一次, 然后再进行条件判断*/
    /*记得调整布尔变量或表达式A的值, 以控制循环语句何时结束*/
}
while(布尔变量或表达式A);
</code></pre>

<h3>for语句</h3>

<h4>C#中的for语句介绍</h4>
<p>在C#中, 我们还可以使用for语句使代码循环运行.</p>
<p>具体语法如下: </p>
<pre><code>
for (初始化语句; 布尔变量或表达式A; 调整布尔变量或表达式A的值, 以控制循环语句何时结束)
{
    /*初始化语句仅执行一遍, 一般用于初始化布尔变量或表达式A中的变量*/
    /*当布尔变量或表达式A为真时运行代码*/
}
</code></pre>

<h4>C#中的foreach语句介绍</h4>
<p>在C#中, 我们还可以使用foreach语句使代码循环运行.</p>
<p>foreach语句可以使集合中的每一个对象参与一次循环.</p>
<pre><code>
foreach (变量类型 变量名 in 集合)
{
    /*集合中的每一个对象将以变量名的形式参与一次循环*/
}
</code></pre>

<h2>跳转</h2>
<p>跳转主要用于代码流程中执行权的跳转.</p>

<h3>break语句</h3>
<p>break用于终止本层循环.</p>

<h4>C#中的break语句介绍</h4>

<h3>continue语句</h3>
<p>continue用于终止本次循环, 并开始本层的下一次循环.</p>

<h4>C#中的continue语句介绍</h4>

<h3>return语句</h3>
<p>return用于返回某个值, 并return后面的代码.</p>

<h4>C#中的return语句介绍</h4>

<h3>goto语句</h3>
<p>goto用于跨越多层循环, 将执行权转移给对应标签的代码.</p>
<p>使用goto语句时要谨慎, 避免提高代码的混乱程度.</p>

<h4>C#中的goto语句介绍</h4> *@