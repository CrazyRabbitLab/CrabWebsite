@page

<h1>字面量 变量与常量 Literal&Variable&Constant</h1>




@* 
<ul>
    <li>字面量</li>
    <ul>
        <li>整数字面量</li>
        <ul>
            <li>十进制字面量</li>
            <li>二进制字面量</li>
            <li>十六进制字面量</li>
        </ul>
        <li>浮点字面量</li>
        <ul>
            <li>二进制浮点字面量</li>
            <ul>
                <li>单精度浮点字面量</li>
                <li>双精度浮点字面量</li>
            </ul>
            <li>十进制浮点字面量</li>
        </ul>
        <li>布尔字面量</li>
        <li>字符字面量</li>
        <li>字符串字面量</li>
        <li>数组字面量</li>
    </ul>
    <li>标识符</li>
    <ul>
        <li>理解标识符</li>
        <li>标识符语法要求</li>
        <li>常见标识符约定</li>
    </ul>
    <li>变量与常量</li>
    <ul>
        <li>变量与常量的声明</li>
        <li>变量与常量的初始化</li>
        <li>变量与常量的作用域与生命周期</li>
    </ul>
    <li>保留关键字</li>
</ul>

<ol>
    <li>标识符</li>
    <li>保留关键字</li>
    <li>变量</li>
    <li>常量</li>
    <li>变量/常量的作用域</li>
</ol>


<h2>标识符</h2>

<h3>特性思考: 标识符</h3>
<p>标识符就是一个名字. 就好像每个人都有一个名字一样, 在计算机世界中, 我们也会把各种不同的事物起一个名字, 这个名字就叫做标识符.</p>
<p>同样的, 就像我们现实世界的人们起名字有一定的规则那样, 在计算机编程语言中, 起名也要符合一定的规则.</p>
<p>对于计算机程序的不同部分, 人们对于命名还有一些约定俗成的默认习惯. 这些会在手册末尾总结呈现出来.</p>

<h3>C#中的标识符介绍</h3>
<p>在C#中, 标识符是大小写敏感的. 也就是说, <b>Hello</b>和<b>hello</b>是两个不同的标识符.</p>
<p>除此之外, 标识符中只能包括字母数字下划线, 同时不能用数字开头. 
<p>关于标识符的要求, 不用纠结原因, 记住规则就好.</p>

<h3>C#中的标识符示例</h3>
举例来说, <b>abc123</b>是可行的, <b>_abc123</b>也是可行的, 但<b>123abc</b>是不可行的.</p>

<h2>保留关键字</h2>

<h3>特性思考: 保留关键字</h3>
<p>前面我们介绍了标识符, 也就是我们为各种事物在编程中起的名字, 但是有一些名字是我们不能使用的, 这部分称为保留关键字.</p>
<p>保留关键字通常在编程语言中起到特殊的作用, 所以我们不能将标识符命名为保留关键字.</p>

<h3>C#语法: 保留关键字</h3>
<p>C#中的保留关键字如下所示, 在之后的学习中, 我们会逐渐讲解大部分保留关键字的特殊作用. 不必记忆, 当需要时查阅即可: </p>
<p>abstract as base bool break byte case catch char checked class const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in int interface internal is lock long namespace new null object operator out override params private protected public readonly ref return sbyte sealed short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using virtual void volatile while</p>

<p>C#中还有一种称为上下文关键字. 上下文在小兔的理解中就是代码执行的环境. 当某一行代码执行时, 这行代码会处于特定的环境中进行执行, 这种环境就是上下文. 就好像人们说的话会有语境一样, 计算机执行语句也要有对应的环境.</p>
<p>上下文关键字指的就是在特殊的代码执行环境中, 我们不能将标识符命名为对应的名字.</p>
<p>通常即便不在对应的特殊代码执行环境(上下文)中, 也不建议使用下述关键字作为标识符.</p>
<p>C#中的上下文关键字如下所示, 同样的不必记忆, 在需要时查阅即可:</p>
<p>add allows alias and ascending args async await by descending dynamic equals field file from get global group init into join let managed(function pointer calling convention) nameof nint not notnull nuint on or orderby partial(type) partial(member) record remove required scoped select set unmanaged(function pointer calling convention) unmanaged(generic type constraint) value var when(filter condition) where(generic type constraint) where(query clause) with yield</p>



<h2>变量</h2>

<h3>特性思考: 变量</h3>
<p>变量指的是在程序运行过程中会发生改变的量, 其本质是内存中的一段数据的名字.</p>

<h3>C#语法: 变量</h3>
<p>在C#中我们使用<b>数据类型名称 变量名</b>的方式定义一个变量.</p>

<h3>C#示例: 变量</h3>
<p>我们可以使用标识符来表示变量, 如下所示:</p>
<pre><code>
    int a;
</code></pre>
<p>这表示我们使用标识符<b>a</b>来表示一个整数(int就是integer整数的简写), 在这时程序将内存中的一部分区域划分给变量a, 用于存放a所代表的整数数值, 这个过程叫做变量的定义.</p>
<p>我们可以为变量赋一个值, 如下: </p>
<pre><code>
    a = 123;
</code></pre>
<p>这代表我们将123这个数值赋给了变量a. 这个过程我们叫做变量的赋值.</p>
<p>此时我们可以通过<code>Console.WriteLine(a)</code>来将a中的数值输出到终端模拟器, 代码如下所示: </p>
<pre><code>
    int a;
    a = 123;
    Console.WriteLine(a);
</code></pre>
<p>在终端模拟器中, 输入<b>dotnet run</b>并回车运行程序, 我们可以观察到终端模拟器的输出是123.</p>
<p>如前所述, 我们将变量看作可以在程序运行中改变的量, 我们可以通过下面的代码改变变量a的值, 并在终端模拟器中输出.</p>
<pre><code>
    int a;
    a = 123;
    Console.WriteLine(a);
    a = 456;
    Console.WriteLine(a);
</code></pre>
<p>在终端模拟器中, 输入<b>dotnet run</b>并回车运行程序, 我们可以观察到终端模拟器首先输出的是123, 然后输出是456, 这代表变量a的值在程序运行过程中发生了改变.</p>
<p>最后, 我们可以在变量定义时就对其进行赋值, 这被称为变量的初始化, 代码如下所示:</p>
<pre><code>
    int a = 123;
    Console.WriteLine(a);
</code></pre>
<p>在终端模拟器中, 输入<b>dotnet run</b>并回车以运行程序, 我们可以观察到终端模拟器输出了123.</p>





<h2>常量</h2>
<p>除了变量这种在程序运行中会发生改变的量以外, 还有一种在程序运行中不会发生改变的量, 这种我们称之为常量.</p>
<p>我们可以通过下面的代码定义一个整数常量a, 并为其赋值为123.</p>
<pre><code>
    const int a = 123;
</code></pre>
<p>在上述代码中, 我们使用标识符a来代表一个值为123的常量.</p>
<p>常量在程序运行过程中不会发生改变, 如果我们强行改变常量的值, 程序运行会发生错误, 代码如下所示: </p>
<pre><code>
    const int a = 123;
    Console.WriteLine(a);
    a = 456;
    Console.WriteLine(a);
</code></pre>
<p>我们在终端模拟器中输入命令: <b>dotnet run</b>来运行程序, 可以观察到程序运行报错: <b>error CS0131: 赋值号左边必须是变量、属性或索引器.</b></p>
<p>由上, 我们可以验证, 常量是一种在程序运行中不能改变的量.</p>

<h3>语言特性思考: 常量</h3>
<p>常量与变量最大的不同就是在程序运行过程中不能够改变其代表的值.</p>
<p>通常我们会将一些常用的数学常数在编程中设定为常量, 比如<b>圆周率PI</b> <b>自然常数E</b> 等.</p>
<p>虽然我们可以设定一个变量, 然后在程序运行中不改变该变量的值以达到常量的作用.</p>
<p>但是常量由于其在运行中不变的特性, 编译器可以进行更好的优化以提升程序运行速度.</p>
<p>同时将合理的设定常量也可以避免程序员在编写程序时出现错误, 因为IDE会进行对应的提示, 而不必等到程序运行, 甚至正式上线后才发现问题.</p> *@
