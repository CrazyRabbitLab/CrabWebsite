@page

<h1>基础数据类型-整数类型 BasicDataType-Int</h1>

@* ------------------------------------------------------------------------ *@


<h2 id="整数类型">整数类型</h2>
<p>整数类型指的就是计算机中的正整数, 0 以及负整数.</p>
<p>在Dotnet中, 共有以下几种整数类型: <code>System.SByte</code> <code>System.Int16</code> <code>System.Int32</code> <code>System.Int64</code> <code>System.Int128</code> <code>System.Byte</code> <code>System.UInt16</code> <code>System.UInt32</code> <code>System.UInt64</code> <code>System.UInt128</code> </p>
<p>上述几种整数类型的核心区别是能够表达的数值范围不同.</p>
<p>上述整数类型的类型(Type)均为结构体(Struct).</p>
<p>因为整数类型之间有着大量相似的数据与操作, 下述以Type和TypeInstance代替具体类型. 请一定要注意数据或操作中Type与TypeInstance到底指代的是什么.</p>

<ul>
    <li>静态数据: </li>
    <ul>
        <li>下述静态数据中, Type指的是: SByte Int16 Int32 Int64 Int128 Byte UInt16 Uint32 Uint64 Uint128</li>
        <ul>
            <li>Type.MaxValue</li>
            <li>Type.MinValue</li>
        </ul>
        <li>下述静态数据中, Type指的是: Int128 UInt128</li>
        <ul>
            <li>Type.Zore</li>
            <li>Type.One</li>
        </ul>
        <li>下述静态数据中, Type指的是: Int128</li>
        <ul>
            <li>Int128.NegativeOne</li>
        </ul>
    </ul>
    <li>静态操作: </li>
    <ul>
        <li>下述静态操作中, Type指的是: SByte Int16 Int32 Int64 Int128 Byte UInt16 Uint32 Uint64 Uint128</li>
        <ul>
            <li>Type.Clamp(Type, Type, Type)</li>
            <li>Type.CreateChecked&lt;TOther&gt;(TOther)</li>
            <li>Type.CreateSaturating&lt;TOther&gt;(TOther)</li>
            <li>Type.CreateTruncating&lt;TOther&gt;(TOther)</li>
            <li>Type.DivRem(Type, Type)</li>
            <li>Type.IsEvenInteger(Type)</li>
            <li>Type.IsOddInteger(Type)</li>
            <li>Type.IsPow2(Type)</li>
            <li>Type.LeadingZeroCount(Type)</li>
            <li>Type.Log2(Type)</li>
            <li>Type.Max(Type, Type)</li>
            <li>Type.Min(Type, Type)</li>
            <li>Type.Parse(ReadOnlySpan&lt;Byte&gt;, IFormatProvider)</li>
            <li>Type.Parse(ReadOnlySpan&lt;Byte&gt;, NumberStyles, IFormatProvider)</li>
            <li>Type.Parse(ReadOnlySpan&lt;Char&gt;, IFormatProvider)</li>
            <li>Type.Parse(ReadOnlySpan&lt;Char&gt;, NumberStyles, IFormatProvider)</li>
            <li>Type.Parse(String, IFormatProvider)</li>
            <li>Type.Parse(String, NumberStyles, IFormatProvider)</li>
            <li>Type.Parse(String, NumberStyles)</li>
            <li>Type.Parse(String)</li>
            <li>Type.PopCount(SByte)</li>
            <li>Type.RotateLeft(Type, Int32)</li>
            <li>Type.RotateRight(Type, Int32)</li>
            <li>Type.Sign(Type)</li>
            <li>Type.TrailingZeroCount(Type)</li>
            <li>Type.TryParse(ReadOnlySpan&lt;Byte&gt;, IFormatProvider, Type)</li>
            <li>Type.TryParse(ReadOnlySpan&lt;Byte&gt;, NumberStyles, IFormatProvider, Type)</li>
            <li>Type.TryParse(ReadOnlySpan&lt;Byte&gt;, Type)</li>
            <li>Type.TryParse(ReadOnlySpan&lt;Char&gt;, IFormatProvider, Type)</li>
            <li>Type.TryParse(ReadOnlySpan&lt;Char&gt;, NumberStyles, IFormatProvider, Type)</li>
            <li>Type.TryParse(ReadOnlySpan&lt;Char&gt;, Type)</li>
            <li>Type.TryParse(String, IFormatProvider, Type)</li>
            <li>Type.TryParse(String, Type)</li>
            <li>Type.TryParse(String, NumberStyles, IFormatProvider, Type)</li>
        </ul>
        <li>下述静态操作中, Type指的是: SByte Int16 Int32 Int64 Int128</li>
        <ul>
            <li>Type.Abs(Type)</li>
            <li>Type.IsNegative(Type)</li>
            <li>Type.IsPositive(Type)</li>
            <li>Type.CopySign(Type, Type)</li>
            <li>Type.MaxMagnitude(Type, Type)</li>
            <li>Type.MinMagnitude(Type, Type)</li>
        </ul>
        <li>下述静态操作中, Type指的是: Int32 Int64 Int128 Uint32 Uint64 Uint128 </li>
        <ul>
            <li>Type.BigMul(Type, Type)</li>
        </ul>
    </ul>
    <li>实例数据: </li>
    <ul>
        <li>所有的整数类型均没有实例数据.</li>
    </ul>
    <li>实例操作: </li>
    <ul>
        <li>下述实例操作中, Type指的是: SByte Int16 Int32 Int64 Int128 Byte UInt16 Uint32 Uint64 Uint128</li>
        <ul>
            <li>CompareTo(Type)</li>
            <li>CompareTo(Object)</li>
            <li>Equals(Type)</li>
            <li>Equals(Object)</li>
            <li>GetHashCode()</li>
            <li>ToString()</li>
            <li>ToString(IFormatProvider)</li>
            <li>ToString(String, IFormatProvider)</li>
            <li>ToString(String)</li>
            <li>TryFormat(Span&lt;Byte&gt;, Int32, ReadOnlySpan&lt;Char&gt;, IFormatProvider)</li>
            <li>TryFormat(Span&lt;Char&gt;, Int32, ReadOnlySpan&lt;Char&gt;, IFormatProvider)</li>
        </ul>
        <li>下述实例操作中, Type指的是: SByte Int16 Int32 Int64 Byte UInt16 Uint32 Uint64</li>
        <ul>
            <li>Type.GetTypeCode()</li>
        </ul>
    </ul>
</ul>

